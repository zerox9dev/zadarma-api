#!/usr/bin/python3
# üîß ZADARMA API CLIENT - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
# ============================================
#
# üö® –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç –∫–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è!
#
# –†–ï–®–ï–ù–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê:
# - –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø–æ–ª—É—á–∞–ª–∏ –æ—à–∏–±–∫—É: ModuleNotFoundError: No module named 'zadarma'
# - –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥—É–ª—è –ø–æ–ª—É—á–∞–ª–∏: 401 Unauthorized 
#
# –ö–û–†–ï–ù–¨ –ü–†–û–ë–õ–ï–ú–´:
# - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
# - –ù–∞—à–∞ –≤–µ—Ä—Å–∏—è: base64.encode(hmac.digest()) - Base64 –æ—Ç —Å—ã—Ä—ã—Ö –±–∞–π—Ç–æ–≤ ‚ùå
# - –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è: base64.encode(hmac.hexdigest().encode()) - Base64 –æ—Ç HEX-—Å—Ç—Ä–æ–∫–∏ ‚úÖ
#
# –ò–°–¢–û–ß–ù–ò–ö –†–ï–®–ï–ù–ò–Ø:
# - –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è Python –±–∏–±–ª–∏–æ—Ç–µ–∫–∞: https://github.com/zadarma/user-api-py-v1
# - –§–∞–π–ª: zadarma/api.py, —Å—Ç—Ä–æ–∫–∏ 105-111
#
# ‚ö†Ô∏è  –ù–ï –ò–ó–ú–ï–ù–Ø–¢–¨ –∞–ª–≥–æ—Ä–∏—Ç–º _generate_signature –±–µ–∑ –∫—Ä–∞–π–Ω–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏!
# ‚ö†Ô∏è  –õ—é–±—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –º–æ–≥—É—Ç —Å–ª–æ–º–∞—Ç—å –≤—Å—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é!
import hashlib
import hmac
import requests
import json
import base64
from urllib.parse import urlencode


class ZadarmaAPI:
    def __init__(self, key, secret, sandbox=False):
        # Initialize Zadarma API client
        # 
        # Args:
        #     key (str): API key
        #     secret (str): API secret
        #     sandbox (bool): Use sandbox mode
        self.key = key
        self.secret = secret
        self.base_url = "https://api.zadarma.com" if not sandbox else "https://api-sandbox.zadarma.com"
    
    def _generate_signature(self, method, params=None):
        # Generate signature for API request according to Zadarma documentation
        # 
        # üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ù–ï –ò–ó–ú–ï–ù–Ø–¢–¨ –≠–¢–û–¢ –ê–õ–ì–û–†–ò–¢–ú!
        # –≠—Ç–æ—Ç –∫–æ–¥ –±—ã–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ –∏–∑—É—á–µ–Ω–∏—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Zadarma.
        # –ö–ª—é—á–µ–≤–æ–µ –æ—Ç–ª–∏—á–∏–µ: Base64 –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ HEX-—Å—Ç—Ä–æ–∫–µ HMAC, –∞ –Ω–µ –∫ —Å—ã—Ä—ã–º –±–∞–π—Ç–∞–º!
        # 
        # –ò—Å—Ç–æ—á–Ω–∏–∫ —Ä–µ—à–µ–Ω–∏—è: https://github.com/zadarma/user-api-py-v1
        # 
        # Args:
        #     method (str): API endpoint path
        #     params (dict): Request parameters
        #     
        # Returns:
        #     str: Generated signature
        if params is None:
            params = {}
        
        # 1. Sort parameters alphabetically (ksort in PHP)
        sorted_params = sorted(params.items())
        
        # 2. Create query string (http_build_query in PHP with RFC1738)
        from urllib.parse import urlencode
        params_string = urlencode(sorted_params) if sorted_params else ""
        
        # 3. MD5 hash of parameters string
        md5_params = hashlib.md5(params_string.encode('utf-8')).hexdigest()
        
        # 4. Create string to sign: method + params_string + md5(params_string)
        string_to_sign = f"{method}{params_string}{md5_params}"
        
        # 5. HMAC-SHA1 with secret key
        hmac_result = hmac.new(
            self.secret.encode('utf-8'), 
            string_to_sign.encode('utf-8'), 
            hashlib.sha1
        )
        
        # 6. üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: Base64 encode the HEX digest (not the raw bytes!)
        # ‚ö†Ô∏è  –ù–ï –ú–ï–ù–Ø–¢–¨: .hexdigest() –≤–º–µ—Å—Ç–æ .digest() - —ç—Ç–æ –∫–ª—é—á–µ–≤–æ–µ –æ—Ç–ª–∏—á–∏–µ!
        # ‚ö†Ô∏è  –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ Zadarma –¥–µ–ª–∞–µ—Ç –∏–º–µ–Ω–Ω–æ —Ç–∞–∫:
        # ‚ö†Ô∏è  base64.b64encode(bytes(hmac_h.hexdigest(), 'utf8'))
        signature = base64.b64encode(
            hmac_result.hexdigest().encode('utf-8')
        ).decode('utf-8')
        
        return signature
    
    def call(self, path, params=None, method="GET"):
        # Make API call to Zadarma
        # 
        # Args:
        #     path (str): API endpoint path
        #     params (dict): Request parameters
        #     method (str): HTTP method
        #     
        # Returns:
        #     dict: API response
        if params is None:
            params = {}
        
        # Add format parameter as per official implementation
        params['format'] = 'json'
        
        # Generate signature
        signature = self._generate_signature(path, params)
        
        # Prepare headers
        headers = {
            'Authorization': f"{self.key}:{signature}"
        }
        

        # Make request
        url = f"{self.base_url}{path}"
        
        try:
            if method.upper() == "GET":
                # For GET requests, build the URL manually to match the signature
                filtered_params = {k: v for k, v in params.items() if not hasattr(v, '__dict__')}
                sorted_params = sorted(filtered_params.items())
                def rfc1738_encode(s):
                    from urllib.parse import quote
                    return quote(str(s), safe='')
                query_string = '&'.join([f"{rfc1738_encode(k)}={rfc1738_encode(v)}" for k, v in sorted_params])
                full_url = f"{url}?{query_string}"
                response = requests.get(full_url, headers=headers)
            elif method.upper() == "POST":
                # For POST requests, use form-encoded data
                headers['Content-Type'] = 'application/x-www-form-urlencoded'
                response = requests.post(url, data=params, headers=headers)
            elif method.upper() == "PUT":
                headers['Content-Type'] = 'application/x-www-form-urlencoded'
                response = requests.put(url, data=params, headers=headers)
            elif method.upper() == "DELETE":
                headers['Content-Type'] = 'application/x-www-form-urlencoded'
                response = requests.delete(url, data=params, headers=headers)
            else:
                raise ValueError(f"Unsupported HTTP method: {method}")
            

            response.raise_for_status()
            return response.text
            
        except requests.exceptions.RequestException as e:
            raise Exception(f"API request failed: {e}")
        except json.JSONDecodeError as e:
            raise Exception(f"Failed to parse API response: {e}")
