#!/usr/bin/python3
# üì• ZADARMA AUDIO DOWNLOADER
# ===========================
#
# –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–µ–π –∑–≤–æ–Ω–∫–æ–≤ –∏–∑ Zadarma API.

import os
import sys
import json
import requests
from datetime import datetime, timedelta
from urllib.parse import urlparse

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from config.settings import *
from src.zadarma import api


class ZadarmaDownloader:
    # –ö–ª–∞—Å—Å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–µ–π –∏–∑ Zadarma
    
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è downloader'–∞
        self.api_client = api.ZadarmaAPI(
            key=API_KEY, 
            secret=API_SECRET, 
            sandbox=SANDBOX_MODE
        )
        self.download_folder = self._get_download_path()
        self.stats = {
            'found': 0,
            'downloaded': 0,
            'errors': 0
        }
    
    def _get_download_path(self):
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–µ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        base_dir = os.path.dirname(os.path.dirname(__file__))
        return os.path.join(base_dir, DOWNLOAD_FOLDER)
    
    def _create_download_folder(self):
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        if not os.path.exists(self.download_folder):
            os.makedirs(self.download_folder)
            self._log(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {self.download_folder}")
        else:
            self._log(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞–ø–∫–∞: {self.download_folder}")
    
    def _log(self, message, level="INFO"):
        # –ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {message}")
    
    def get_call_records(self):
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π –∑–≤–æ–Ω–∫–æ–≤
        self._log("üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –∑–≤–æ–Ω–∫–æ–≤...")
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥
        end_time = datetime.utcnow()
        start_time = end_time - timedelta(days=DAYS_BACK)
        
        date_from = start_time.strftime("%Y-%m-%d %H:%M:%S")
        date_to = end_time.strftime("%Y-%m-%d %H:%M:%S")
        
        self._log(f"üìÖ –ü–µ—Ä–∏–æ–¥: {date_from} - {date_to}")
        
        try:
            # –ó–∞–ø—Ä–æ—Å –∫ API
            response_text = self.api_client.call('/v1/statistics/pbx/', {
                'start': date_from,
                'end': date_to
            })
            
            response = json.loads(response_text)
            
            if response.get('status') != 'success':
                raise Exception(f"API Error: {response.get('message', 'Unknown error')}")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–≤–æ–Ω–∫–∏ —Å –∑–∞–ø–∏—Å—è–º–∏
            all_calls = response.get('stats', [])
            recorded_calls = [call for call in all_calls if call.get('is_recorded') == 'true']
            
            self.stats['found'] = len(recorded_calls)
            
            self._log(f"üìû –í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤: {len(all_calls)}")
            self._log(f"üéµ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(recorded_calls)}")
            
            return recorded_calls
            
        except Exception as e:
            self._log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {e}", "ERROR")
            return []
    
    def get_download_link(self, call_id):
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
        try:
            response_text = self.api_client.call('/v1/pbx/record/request/', {
                'call_id': call_id
            })
            
            response = json.loads(response_text)
            
            if response.get('status') != 'success':
                self._log(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è {call_id}: {response.get('message')}", "WARNING")
                return None
            
            return response.get('link')
            
        except Exception as e:
            self._log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è {call_id}: {e}", "ERROR")
            return None
    
    def _format_filename(self, call_data):
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        call_id = call_data.get('call_id', 'unknown')
        call_start = call_data.get('callstart', '')
        sip = call_data.get('sip', 'unknown')
        destination = str(call_data.get('destination', 'unknown'))
        duration = call_data.get('seconds', 0)
        
        # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        try:
            dt = datetime.strptime(call_start, "%Y-%m-%d %H:%M:%S")
            date = dt.strftime("%Y%m%d")
            time = dt.strftime("%H%M%S")
        except:
            date = "unknown_date"
            time = "unknown_time"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        filename = FILENAME_TEMPLATE.format(
            call_id=call_id,
            date=date,
            time=time,
            sip=sip,
            destination=destination,
            duration=duration
        )
        
        # –û—á–∏—â–∞–µ–º –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        invalid_chars = '<>:"/\\|?*'
        for char in invalid_chars:
            filename = filename.replace(char, '_')
        
        return filename
    
    def download_file(self, url, filename):
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        filepath = os.path.join(self.download_folder, filename)
        
        for attempt in range(MAX_DOWNLOAD_ATTEMPTS):
            try:
                self._log(f"üì• –°–∫–∞—á–∏–≤–∞–µ–º: {filename} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                
                response = requests.get(url, timeout=REQUEST_TIMEOUT)
                response.raise_for_status()
                
                with open(filepath, 'wb') as f:
                    f.write(response.content)
                
                file_size = len(response.content)
                self._log(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename} ({file_size:,} –±–∞–π—Ç)")
                
                return filepath
                
            except Exception as e:
                if attempt < MAX_DOWNLOAD_ATTEMPTS - 1:
                    self._log(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ—É–¥–∞—á–Ω–∞: {e}", "WARNING")
                else:
                    self._log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å {filename}: {e}", "ERROR")
        
        return None
    
    def _print_call_info(self, call_data, index, total):
        # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–≤–æ–Ω–∫–µ
        self._log(f"\nüìû –ó–∞–ø–∏—Å—å {index}/{total}:")
        self._log(f"   üÜî ID: {call_data.get('call_id')}")
        self._log(f"   ‚è∞ –í—Ä–µ–º—è: {call_data.get('callstart')}")
        self._log(f"   üì± SIP: {call_data.get('sip')}")
        self._log(f"   üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {call_data.get('destination')}")
        self._log(f"   ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {call_data.get('seconds')} —Å–µ–∫")
        self._log(f"   üìä –°—Ç–∞—Ç—É—Å: {call_data.get('disposition')}")
    
    def download_all_records(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
        self._log("üéµ ZADARMA AUDIO DOWNLOADER")
        self._log("=" * 50)
        
        env = "SANDBOX" if SANDBOX_MODE else "PRODUCTION"
        self._log(f"üåç –†–µ–∂–∏–º: {env}")
        self._log(f"üîë API Key: {API_KEY[:10]}...")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É
        self._create_download_folder()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
        records = self.get_call_records()
        
        if not records:
            self._log("üì≠ –ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        self._log(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ {len(records)} –∑–∞–ø–∏—Å–µ–π...")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å
        for index, record in enumerate(records, 1):
            self._print_call_info(record, index, len(records))
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É
            download_url = self.get_download_link(record['call_id'])
            if not download_url:
                self.stats['errors'] += 1
                continue
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            filename = self._format_filename(record)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º
            if self.download_file(download_url, filename):
                self.stats['downloaded'] += 1
            else:
                self.stats['errors'] += 1
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self._print_final_stats()
    
    def _print_final_stats(self):
        # –í—ã–≤–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self._log("\n" + "=" * 50)
        self._log("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        self._log(f"   üéµ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {self.stats['found']}")
        self._log(f"   ‚úÖ –°–∫–∞—á–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ: {self.stats['downloaded']}")
        self._log(f"   ‚ùå –û—à–∏–±–æ–∫: {self.stats['errors']}")
        self._log(f"   üìÅ –ü–∞–ø–∫–∞: {self.download_folder}")
        
        if self.stats['downloaded'] > 0:
            self._log("üéâ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        else:
            self._log("üòû –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã")


def main():
    # –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    try:
        downloader = ZadarmaDownloader()
        downloader.download_all_records()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
